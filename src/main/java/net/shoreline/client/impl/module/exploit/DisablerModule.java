package net.shoreline.client.impl.module.exploit;

import it.unimi.dsi.fastutil.objects.Object2IntMap;
import net.minecraft.enchantment.Enchantment;
import net.minecraft.enchantment.Enchantments;
import net.minecraft.item.ItemStack;
import net.minecraft.item.TridentItem;
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.shoreline.client.api.config.Config;
import net.shoreline.client.api.config.setting.EnumConfig;
import net.shoreline.client.api.event.listener.EventListener;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.ToggleModule;
import net.shoreline.client.impl.event.network.PlayerTickEvent;
import net.shoreline.client.init.Managers;
import net.shoreline.client.util.player.EnchantmentUtil;

/**
 * @author xgraza
 * @since 1.0
 */
public final class DisablerModule extends ToggleModule
{
    Config<Mode> modeConfig = new EnumConfig<>("Mode", "The mode which to disable the checks of the Anti-Cheating system. This mode can possibly disable either the entirety of the Anti-Cheat checks or partially. This MAY get you banned on some servers which do not take kindly to disabling their AntiCheat", Mode.GRIM_TRIDENT, Mode.values());

    public DisablerModule()
    {
        super("Disabler", "Disables anticheat checks or all of them", ModuleCategory.EXPLOITS);
    }

    @EventListener
    public void onPlayerTick(final PlayerTickEvent event)
    {
        if (modeConfig.getValue() == Mode.GRIM_TRIDENT)
        {
            int tridentSlot = -1;
            for (int i = 0; i < 9; ++i)
            {
                final ItemStack stack = mc.player.getInventory().getStack(i);
                if (!stack.isEmpty() && stack.getItem() instanceof TridentItem)
                {
                    final Object2IntMap<Enchantment> enchantments = EnchantmentUtil.getEnchantments(stack);
                    if (enchantments.containsKey(Enchantments.RIPTIDE) && enchantments.getInt(Enchantments.RIPTIDE) >= 3)
                    {
                        tridentSlot = i;
                        break;
                    }
                }
            }

            if (tridentSlot == -1)
            {
                return;
            }

            Managers.INVENTORY.setSlot(tridentSlot);
            Managers.NETWORK.sendPacket(new PlayerActionC2SPacket(PlayerActionC2SPacket.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, Direction.DOWN));
            Managers.INVENTORY.syncToClient();
        }
    }

    private enum Mode
    {
        GRIM_TRIDENT
    }
}
